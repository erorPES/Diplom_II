import cv2
import time
import os
from ultralytics import YOLO
import logging

# –û—Ç–∫–ª—é—á–∞–µ–º –≤—ã–≤–æ–¥ –Ω–µ–Ω—É–∂–Ω—ã—Ö –ª–æ–≥–æ–≤ –∏–∑ ultralytics
logging.getLogger('ultralytics').setLevel(logging.WARNING)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å YOLOv8
model = YOLO('yolov8n.pt')

# –ó–∞—Ö–≤–∞—Ç –≤–∏–¥–µ–æ —Å –∫–∞–º–µ—Ä—ã
cap = cv2.VideoCapture(0)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –∫–∞–¥—Ä–æ–≤
cap.set(cv2.CAP_PROP_FRAME_WIDTH, 1920)
cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 1080)

# –ü–æ–ª—É—á–∞–µ–º FPS –∏–∑ –∫–∞–º–µ—Ä—ã
fps = cap.get(cv2.CAP_PROP_FPS)
print(f"FPS –∫–∞–º–µ—Ä—ã: {fps}")

# –£—Å—Ç–∞–Ω–æ–≤–∏–º FPS –∑–∞–ø–∏—Å–∏ –≤–∏–¥–µ–æ —Ä–∞–≤–Ω—ã–º FPS –∫–∞–º–µ—Ä—ã
record_fps = fps  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å FPS, –∫–æ—Ç–æ—Ä—ã–π –∫–∞–º–µ—Ä–∞ —Ä–µ–∞–ª—å–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç

# –í—Ä–µ–º—è –º–µ–∂–¥—É –∫–∞–¥—Ä–∞–º–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
frame_interval = 1 / record_fps

recording = False
record_start_time = 0
out = None
last_frame_time = 0

# –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ
save_dir = r'C:\Users\ilyac\PycharmProjects\YOLOv8\.venv\video'
os.makedirs(save_dir, exist_ok=True)  # –°–æ–∑–¥–∞—Å—Ç –ø–∞–ø–∫—É, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–¥–µ–∫ MJPG –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤–∏–¥–µ–æ —Å —Ö–æ—Ä–æ—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
fourcc = cv2.VideoWriter_fourcc(*'MJPG')

while True:
    ret, frame = cap.read()
    if not ret:
        break

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ–¥–µ–ª—å YOLOv8 –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
    results = model(frame)[0]
    person_detected = False

    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∏ —Ä–∏—Å—É–µ–º —Ä–∞–º–∫–∏ –≤–æ–∫—Ä—É–≥ –ª—é–¥–µ–π
    for result in results.boxes:
        cls_id = int(result.cls[0])
        if model.names[cls_id] == 'person':
            person_detected = True
            x1, y1, x2, y2 = map(int, result.xyxy[0])
            # –£–º–µ–Ω—å—à–∞–µ–º —à–∏—Ä–∏–Ω—É —Ä–∞–º–∫–∏ –Ω–∞ 20%
            width_shrink = int((x2 - x1) * 0.2)
            x1 += width_shrink
            x2 -= width_shrink
            cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)

    # –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –±—ã–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω
    if person_detected and not recording:
        print("üü¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω —á–µ–ª–æ–≤–µ–∫ ‚Äî –Ω–∞—á–∏–Ω–∞—é –∑–∞–ø–∏—Å—å –Ω–∞ 10 —Å–µ–∫—É–Ω–¥")
        record_start_time = time.time()
        timestamp = time.strftime('%Y-%m-%d_%H-%M-%S')
        video_path = os.path.join(save_dir, f'person_{timestamp}.avi')
        out = cv2.VideoWriter(video_path, fourcc, record_fps, (frame.shape[1], frame.shape[0]))
        recording = True

    # –ó–∞–ø–∏—Å—å –≤–∏–¥–µ–æ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –≤—Ä–µ–º–µ–Ω–∏
    if recording:
        current_time = time.time()

        # –ü–∏—à–µ–º –∫–∞–¥—Ä –≤ –≤–∏–¥–µ–æ, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
        if current_time - last_frame_time >= frame_interval:
            out.write(frame)
            last_frame_time = current_time

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 10 —Å–µ–∫—É–Ω–¥
        if current_time - record_start_time >= 10:
            print("üî¥ 10 —Å–µ–∫—É–Ω–¥ –ø—Ä–æ—à–ª–æ ‚Äî –∑–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            recording = False
            out.release()
            out = None

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤–∏–¥–µ–æ –≤ –æ–∫–Ω–µ
    cv2.imshow("Live", frame)

    # –í—ã—Ö–æ–¥ –ø–æ –∫–ª–∞–≤–∏—à–µ ESC
    if cv2.waitKey(1) & 0xFF == 27:
        break

# –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É —Å –∫–∞–º–µ—Ä–æ–π –∏ –∑–∞–ø–∏—Å—ã–≤–∞—é—â–∏–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º
cap.release()
if out:
    out.release()
cv2.destroyAllWindows()
